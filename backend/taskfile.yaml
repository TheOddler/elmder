version: "3"

sources: &defaultSources
  - &srcFiles "src/**/*.hs"
  - &elmGenSrcFiles "elm-gen/**/*.hs"
  - &cabalFile backend.cabal

tasks:
  default:
    cmds:
      - task: start-db
      # Defer inside a watch behaves weirdly, so instead by default we do the defer outside of the watch
      - defer: { task: stop-db }
      - task test-and-run --watch

  test-and-run:
    cmds:
      - task: test
      - task: elm-gen
      - task: run

  test:
    cmds:
      - cabal test --test-option="{{.MATCH}}"
    sources: &sources-for-test
      - *srcFiles
      - *cabalFile
      - *elmGenSrcFiles
      - "test/**/*.hs"

  run:
    cmds:
      - pkill backend-exe || true # Kill existing backend if it's still running, Task should already do that, but apparently not always when watching: https://github.com/go-task/task/issues/160
      - cabal run backend-exe
    sources: *defaultSources

  golden-test-reset:
    cmds:
      - cabal test --test-options="--golden-reset --golden-start"
    sources: *sources-for-test

  elm-gen:
    cmds:
      - cabal run elm-gen
    sources:
      - *srcFiles
      - *cabalFile
      - *elmGenSrcFiles

  start-db:
    desc: Starts the database if it's not running
    deps: [setup-db]
    status:
      # If the server is already running, we can skip.
      - pg_ctl status -D ./postgres
    cmds:
      - pg_ctl start -D ./postgres -l psql_logfile

  stop-db:
    desc: Stops the database if it's running
    status:
      # If the server is already stopped, we can skip
      - "! pg_ctl status -D ./postgres"
    cmds:
      - pg_ctl stop -D ./postgres

  setup-db:
    desc: |
      Anything needed to make sure the DB can be started locally.
      If the ./postgres folder already exists we assume this command was already successfully run and we can skip.
      If you want to setup a new one, manually delete the `./postgres` folder in backend.
    status:
      - '[ -d "./postgres" ]' # if ./postgres folder exist we can skip
    cmds:
      - echo "Look like you're setting up a new db, probably because you're running the backend for the first time, or because you deleted the database."
      - echo "This requires admin rights, so please provide your password:"
      # I don't really want to bother creating a postgres user, so we need to do some work to allow that
      - sudo mkdir -p /run/postgresql
      - sudo chown -R $USER /run/postgresql
      # Actually create the database
      - mkdir -p ./postgres
      - pg_ctl initdb -D ./postgres
      - pg_ctl start -D ./postgres # The next commands need a running server, so start one
      - createdb # creates a default database with the user's name
      - pg_ctl stop -D ./postgres # and then stop it again
